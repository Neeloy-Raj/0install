#!/bin/bash
#-JUNKPROJECT-JoyGhosh
#VAIRABLES
pl1="[\033[31m⌛\033[0m]"
pl="[\033[31m♾️\033[0m]"
pl2="[\033[32m✔\033[0m]"
a1="x86_64"
archc=$(arch)
k1="is installed"
k2="is not installed installing"
k3="is not installed using apt now installing it from source"
pwd=$(pwd)
#----end
function banner() {
  echo -e """
  \033[31m█▀█\033[0m ▄▄ █ █▄░█ █▀ ▀█▀ ▄▀█ █░░ █░░ █▀▀ █▀█
  \033[31m█▄█\033[0m ░░ █ █░▀█ ▄█ ░█░ █▀█ █▄▄ █▄▄ ██▄ █▀▄ [1.0] [0xJoyGhosh]
  """
}
# Installation
#apt-installation
function apt(){
  sudo apt -qq install $1
}
#-------------------------
#wget_downloader
function wget(){
  sudo wget -q $1
}
#-------------------------
#Tar_extract
function extract_tar(){
  tar -xf *.tar.gz
}
#unziper
function unziper(){
  sudo unzip $1
}
#go-get
function go_get(){
  go get -u $1
}
#github_latest
function get_latest(){
curl -sL https://api.github.com/repos/$1/releases/latest | jq -r '.assets[].browser_download_url'| grep $2 | xargs -P30 -n1 wget;tar -xf *.tar.gz;rm *.tar.gz
}
#go-alternative
function go_alter(){
  if command -v go &>/dev/null;
  then
  echo -e "$pl2 Golang is installed"
  else
  echo -e "$pl1 Looks Like  golang is not installed using apt now installing it from source"
  sudo mkdir /usr/local/go
  cd /usr/local/go
  wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz
  tar go1.16.2.linux-amd64.tar.gz
  sudo rm go1.16.2.linux-amd64.tar.gz
  sudo echo "export PATH=$PATH:/usr/local/go/bin" | tee -a $HOME/.profile
  echo -e "$pl1 Golang is Installed Now"
  fi
}
#move_bin
function mv_bin(){
  sudo mv $1 /bin
}
#go-apt
function install_go(){
  if command -v go &>/dev/null;
  then
  echo -e "$pl2 Golang $k1"
  else
  echo -e "$pl1 Golang $k2"
  apt golang
  go_alter
fi
}
#Install_gcc
function install_gcc(){
  if command -v gcc &>/dev/null;
  then
  echo -e "$pl2 gcc $k1"
  else
  echo -e "$pl1 gcc $k2"
  apt gcc
fi
}
#install_make
function install_make(){
  if command -v make &>/dev/null;
  then
  echo -e "$pl2 make $k1"
  else
  echo -e "$pl1 make $k2"
  apt make
fi
}
#install_dig
function install_dig(){
  if command -v dig &>/dev/null;
  then
  echo -e "$pl2 dig $k1"
  else
  echo -e "$pl1 dig $k2"
  apt dnsutils
fi
}
#install_host
function install_host(){
  if command -v host &>/dev/null;
  then
  echo -e "$pl2 host $k1"
  else
  echo -e "$pl1 host $k2"
  apt host
fi
}
#install_dnsx
function install_dnsx(){
  if command -v dnsx &>/dev/null;
  then
  echo -e "$pl2 dnsx $k1"
  else
  echo -e "$pl1 dnsx $k2"
  echo -e "$pl2 Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing dnsx for $archc"
    get_latest projectdiscovery/dnsx linux_amd64
    extract_tar
    mv_bin dnsx
  else
    echo -e "$pl2 Installing dnsx for $archc"
    get_latest projectdiscovery/dnsx linux_386
    extract_tar
    mv_bin dnsx
fi
fi
}
#install_subfinder
function install_subfinder(){
  if command -v subfinder &>/dev/null;
  then
  echo -e "$pl2 subfinder $k1"
  else
  echo -e "$pl1 sunfinder $k2"
  echo -e "$pl Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing subfinder for $archc"
    get_latest projectdiscovery/subfinder linux_amd64
    extract_tar
    mv_bin subfinder
  else
    echo -e "$pl2 Installing subfinder for $archc"
    get_latest projectdiscovery/subfinder linux_386
    extract_tar
    mv_bin subfinder
fi
fi
}
#install_nuclei
function install_nuclei(){
  if command -v nuclei &>/dev/null;
  then
  echo -e "$pl2 nuclei $k1"
  else
  echo -e "$pl1 nuclei $k2"
  echo -e "$pl Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing nuclei for $archc"
    get_latest projectdiscovery/nuclei linux_amd64
    extract_tar
    mv_bin nuclei
  else
    echo -e "$pl2 Installing nuclei for $archc"
    get_latest projectdiscovery/nuclei linux_386
    extract_tar
    mv_bin nuclei
fi
fi
}
#install_assetfinder
function install_assetfinder(){
  if command -v assetfinder &>/dev/null;
  then
  echo -e "$pl2 assetfinder $k1"
  else
  echo -e "$pl1 assetfinder $k2"
  go_get github.com/tomnomnom/assetfinder
  cd
  cd go/bin
  mv_bin assetfinder
  cd
fi
}
#install_jq
function install_jq(){
  if command -v jq &>/dev/null;
  then
  echo -e "$pl2 jq $k1"
  else
  echo -e "$pl1 jq $k2"
  apt jq
fi
}
#install_httprobe
function install_httprobe(){
  if command -v httprobe &>/dev/null;
  then
  echo -e "$pl2 httprobe $k1"
  else
  echo -e "$pl1 httprobe $k2"
  go_get github.com/tomnomnom/httprobe
  cd
  cd go/bin
  mv_bin httprobe
  cd
fi
}
#install_waybackurl
function install_wayback(){
  if command -v waybackurls &>/dev/null;
  then
  echo -e "$pl2 waybackurls $k1"
  else
  echo -e "$pl1 waybackurl $k2"
  go_get github.com/tomnomnom/waybackurls
  cd
  cd go/bin
  mv_bin waybackurls
  cd
fi
}
#install_meg
function install_meg(){
  if command -v meg &>/dev/null;
  then
  echo -e "$pl2 meg $k1"
  else
  echo -e "$pl1 meg $k2"
  go_get github.com/tomnomnom/meg
  cd
  cd go/bin
  mv_bin meg
  cd
fi
}
#install_gf
function install_gf(){
  if command -v gf &>/dev/null;
  then
  echo -e "$pl2 gf $k1"
  else
  echo -e "$pl1 gf $k2"
  go_get github.com/tomnomnom/gf
  cd
  cd go/bin
  mv_bin gf
  cd
fi
}
#install_gron
function install_gron(){
  if command -v gron &>/dev/null;
  then
  echo -e "$pl2 gron $k1"
  else
  echo -e "$pl1 gron $k2"
  go_get github.com/tomnomnom/gron
  cd
  cd go/bin
  mv_bin gron
  cd
fi
}
#install_amass
function install_amass(){
  if command -v amass &>/dev/null;
  then
  echo -e "$pl2 amass $k1"
  else
  echo -e "$pl1 amass $k2"
  echo -e "$pl Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing amass for $archc"
    get_latest OWASP/Amass linux_amd64
    unzip *.zip
    cd amass_linux_amd64
    mv_bin amass
  else
    echo -e "$pl2 Installing subfinder for $archc"
    get_latest OWASP/Amass linux_386
    unzip *.zip
    cd amass_linux_i386
    mv_bin amass
fi
fi
}
#install_webscreenshot
function install_webscreenshot(){
  if command -v webscreenshot &>/dev/null;
  then
  echo -e "$pl2 webscreenshot $k1"
  else
  echo -e "$pl1 webscreenshot $k2"
  pip install webscreenshot
  pip install selenium
  echo -e "$pl webscreenshot Installed Successfully"
fi
}
#install_waybackunifier
function install_waybackunifier(){
  if command -v waybackunifier &>/dev/null;
  then
  echo -e "$pl2 waybackunifier $k1"
  else
  echo -e "$pl1 waybackunifier $k2"
  go_get github.com/mhmdiaa/waybackunifier
  cd
  cd go/bin
  mv_bin waybackunifier
  cd
fi
}
#install_shodan
function install_shodan(){
  if command -v shodan &>/dev/null;
  then
  echo -e "$pl2 shodan $k1"
  else
  echo -e "$pl shodan $k2"
  pip3 install shodan
fi
}
#install_censys
function install_censys(){
  if command -v censys &>/dev/null;
  then
  echo -e "$pl2 censys $k1"
  else
  echo -e "$pl censys $k2"
  pip3 install censys
fi
}
#install_goaltdns
function install_goaltdns(){
  if command -v goaltdns &>/dev/null;
  then
  echo -e "$pl2 goaltdns $k1"
  else
  echo -e "$pl1 goaltdns $k2"
  go_get github.com/subfinder/goaltdns
  cd
  cd go/bin
  mv_bin goaltdns
  cd
fi
}
#install_subjack
function install_subjack(){
  if command -v subjack &>/dev/null;
  then
  echo -e "$pl2 subjack $k1"
  else
  echo -e "$pl1 subjack $k2"
  go_get github.com/haccer/subjack
  cd
  cd go/bin
  mv_bin subjack
  cd
fi
}
#install_fuff
function install_ffuf(){
  if command -v ffuf &>/dev/null;
  then
  echo -e "$pl2 ffuf $k1"
  else
  echo -e "$pl1 ffuf $k2"
  go_get github.com/ffuf/ffuf
  cd
  cd go/bin
  mv_bin ffuf
  cd
fi
}
#install_hakrawler
function install_hakrawler(){
  if command -v hakrawler &>/dev/null;
  then
  echo -e "$pl2 hakrawler $k1"
  else
  echo -e "$pl1 hakrawler $k2"
  go_get github.com/hakluke/hakrawler
  cd
  cd go/bin
  mv_bin hakrawler
  cd
fi
}
#install_knockpy
function install_knockpy(){
  if command -v knockpy &>/dev/null;
  then
  echo -e "$pl2 knockpy $k1"
  else
  echo -e "$pl knockpy $k2"
  pip3 install knockpy
fi
}
#install_kxss
function install_kxss(){
  if command -v kxss &>/dev/null;
  then
  echo -e "$pl2 kxss $k1"
  else
  echo -e "$pl1 kxss $k2"
  go_get github.com/Emoe/kxss
  cd
  cd go/bin
  mv_bin kxss
  cd
fi
}
#install_dalfox
function install_dalfox(){
  if command -v dalfox &>/dev/null;
  then
  echo -e "$pl2 dalfox $k1"
  else
  echo -e "$pl1 dalfox $k2"
  echo -e "$pl Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing dalfox for $archc"
    get_latest hahwul/dalfox linux_amd64
    extract_tar
    mv_bin dalfox
  else
    echo -e "$pl2 Installing nuclei for $archc"
    get_latest hahwul/dalfox linux_386
    extract_tar
    mv_bin dalfox
fi
fi
}
#install_otxurls
function install_otxurls(){
  if command -v otxurls &>/dev/null;
  then
  echo -e "$pl2 otxurls $k1"
  else
  echo -e "$pl1 otxurls $k2"
  go_get github.com/lc/otxurls
  cd
  cd go/bin
  mv_bin otxurls
  cd
fi
}
#install_awscheck
function install_awscheck(){
  if command -v awscheck &>/dev/null;
  then
  echo -e "$pl2 awscheck $k1"
  else
  echo -e "$pl1 awscheck $k2"
  go_get github.com/lc/hacks/awscheck
  cd
  cd go/bin
  mv_bin awscheck
  cd
fi
}
#install_subjs
function install_subjs(){
  if command -v subjs &>/dev/null;
  then
  echo -e "$pl2 subjs $k1"
  else
  echo -e "$pl1 subjs $k2"
  echo -e "$pl2 Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing subjs for $archc"
    get_latest lc/subjs linux_amd64
    extract_tar
    mv_bin subjs
  else
    echo -e "$pl2 Installing subjs for $archc"
    get_latest lc/subjs linux_386
    extract_tar
    mv_bin subjs
fi
fi
}
#install_gau
function install_gau(){
  if command -v gau &>/dev/null;
  then
  echo -e "$pl2 gau $k1"
  else
  echo -e "$pl1 gau $k2"
  echo -e "$pl2 Detecting Architecture"
  if [ $archc == $a1 ]
  then
    echo -e "$pl2 Installing gau for $archc"
    get_latest lc/gau linux_amd64
    extract_tar
    mv_bin gau
  else
    echo -e "$pl2 Gau is not avilable for $archc"
fi
fi
}
#download_gf_patterns_nuclei_templates
function download_templates(){
  cd
  if [ -d "nuclei-templates" ]
  then
      echo -e "$pl2 Nuclei templates already downloaded"
  else
      echo -e "$pl1 Nuclei templates not found downloading in $pwd"
      git clone https://github.com/projectdiscovery/nuclei-templates
  fi
  if [ -d ".gf" ]
  then
      echo -e "$pl2 Gf patterns already installed"
  else
      echo -e "$pl1 gf patterns not found installing"
      git clone https://github.com/1ndianl33t/Gf-Patterns
      mkdir .gf
      mv Gf-Patterns/*.json .gf
  fi
}
#install_corsy
function install_corsy(){
  cd /opt
  if [ -d "Corsy" ]
  then
      echo -e "$pl2 Corsy is installed"
  else
      echo -e "$pl1 Corsy is not installed installing"
      sudo git clone https://github.com/s0md3v/Corsy
      cd
      sudo echo 'alias corsy = "python3 /opt/Corsy/corsy.py' >> .bashrc
      sudo echo 'alias corsy = "python3 /opt/Corsy/corsy.py' >> .zshrc
      echo -e "$pl Now You can Execute Corsy using corsy command"
  fi
}
#install_pip3
function install_pip(){
  if command -v pip3 &>/dev/null;
  then
  echo -e "$pl2 pip3 $k1"
  else
  echo -e "$pl1 pip3 $k2"
  apt python3-pip
fi
}
banner
install_go
install_dig
install_jq
install_make
install_gcc
install_pip
install_dnsx
install_subfinder
install_nuclei
install_assetfinder
install_wayback
install_meg
install_gf
install_gron
install_amass
install_webscreenshot
install_waybackunifier
install_shodan
install_censys
install_goaltdns
install_subjack
install_ffuf
install_hakrawler
install_knockpy
install_kxss
install_dalfox
install_otxurls
install_subjs
install_awscheck
install_gau
install_corsy
download_templates
